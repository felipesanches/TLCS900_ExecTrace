#!/usr/bin/env python3
# (c) 2023 Felipe Correa da Silva Sanches <juca@members.fsf.org>
# Licensed under GPL version 3 or later

import os
import sys

import importlib  
tlcs900h_disasm = importlib.import_module("tlcs900h-disasm")
TLCS900H_Trace = tlcs900h_disasm.TLCS900H_Trace

if not (len(sys.argv) == 2):
    sys.exit(f"usage: {sys.argv[0]} <rom_file>")

POSSIBLY_UNUSED_CODEBLOCKS = {}
KNOWN_LABELS = {}

parse_interrupt_table = False
RELOCATION_BLOCKS = (
    # physical,  logical, length 
     (0x000000,  0x000400, 0x000100),
     (0x000100,  0x00f000, 0x02ff00),
)

jump_table_from = []
entry_points = [
0x01F8D5,
0x01F8DF,
0x01FC95,
0x01FCDE,
0x01FDDA,
0x01FFFD,
0x0200C0,
0x0204D1,
0x020642,
0x0206D3,
0x02072A,
0x0208B8,
0x020966,
0x020A65,
0x020A9D,
0x020AB8,
0x020AF4,
0x020B2C,
0x020B47,
0x020B83,
0x020BBB,
0x020BD6,
0x020C15,
0x020C6B,
0x020DB3,
0x020FBC,
0x021023,
0x021031,
0x021036,
0x02177E,
0x021A8E,
0x021ECB,
0x02219F,
0x022340,
0x022587,
0x0225D3,
0x022691,
0x022824,
0x022844,
0x0229EC,
0x022B02,
0x022B19,
0x022BF2,
0x022DAC,
0x022DBD,
0x022E2A,
0x022EBA,
0x022F3C,
0x022FCC,
0x023043,
0x02315F,
0x02333E,
0x0233F8,
0x023584,
0x023809,
0x023849,
0x0238F8,
0x0239E1,
0x023A05,
0x023A4A,
0x023A8E,
0x023A99,
0x023AD0,
0x024102,
0x024300,
0x024444,
0x024554,
0x024664,
0x0248D5,
0x0249BF,
0x024A59,
0x024BE3,
0x024F41,
0x025229,
0x0253FE,
0x025499,
0x025589,
0x0255F3,
0x025636,
0x02591D,
0x025A35,
0x025B6F,
0x025C87,
0x025F7F,
0x026396,
0x026533,
0x026637,
0x026684,
0x0266D8,
0x026769,
0x02684A,
0x02685B,
0x02686F,
0x026975,
0x026AAA,
0x026BDC,
0x026C16,
0x027A46,
0x027AC4,
0x027CBE,
0x027CD1,
0x027CE4,
0x027DD1,
0x027EBE,
0x027F19,
0x028B23,
0x028B30,
0x028B96,
0x028C28,
0x028D2E,
0x028D42,
0x028D4C,
0x028DBF,
0x028E26,
0x028ED1,
0x029071,
0x029E31,
0x02A282,
0x02A4EA,
0x02A5E6,
0x02A78E,
0x02A7AF,
0x02AA38,
0x02AAE7,
0x02AB10,
0x02ADC1,
0x02AE22,
0x02AE58,
0x02AEA2,
0x02AEEC,
0x02AF3A,
0x02AF82,
0x02AFBD,
0x02B014,
0x02B154,
0x02B1E0,
0x02B2C2,
0x02B2E9,
0x02B2F5,
0x02B301,
0x02B3C0,
0x02B3DD,
0x02B4A1,
0x02CCD3,
0x02CCF5,
0x02CD14,
0x02CD36,
0x02CD55,
0x02CD71,
0x02CF07,
0x02CF97,
0x02D00D,
0x02D0BA,
0x02D101,
0x02D41B,
0x02D436,
0x02D50E,
0x02D5D0,
0x02D620,
0x02D670,
0x02D68F,
0x02D73F,
0x02DA16,
0x02DA96,
0x02DAB8,
0x02DB16,
0x02DB33,
0x02DBB3,
0x02DBD5,
0x02DC50,
0x02DCD0,
0x02DCF2,
0x02DD50,
0x02DD6D,
0x02DE69,
0x02DEB0,
0x02DF68,
0x02DFA8,
0x02E18D,
0x02E213,
0x02ECE9,
0x02F50D,
0x030618,
0x030960,
0x0309EA,
0x030F7D,
0x03106F,
0x03111A,
0x031A72,
0x031E6A,
0x031F06,
0x03206F,
0x03248B,
0x0325FC,
0x032682,
0x0326B6,
0x0328B5,
0x0328E2,
0x032938,
0x032A08,
0x032AE0,
0x032B1E,
0x032E1E,
0x032FD5,
0x0330D5,
0x0333BE,
0x033557,
0x0337D2,
0x03399E,
0x033B4C,
0x033B8B,
0x033C6B,
0x033CE5,
0x033DD3,
0x033E02,
0x033F74,
0x03404C,
0x03421E,
0x03430F,
0x034491,
0x034503,
0x034606,
0x034651,
0x03469C,
0x0346E7,
0x034732,
0x0347B7,
0x034890,
0x034968,
0x034A4A,
0x034B4B,
0x034C45,
0x034CDB,
0x034D5F,
0x034D93,
0x0351B3,
0x03522E,
0x035323,
0x035490,
0x03555F,
0x035575,
0x0356C9,
0x03581D,
0x035AC8,
0x0360A7,
0x03611E,
0x03616A,
0x0361C5,
0x0361D4,
0x0361D9,
0x036205,
0x03621C,
0x036237,
0x036252,
0x03627A,
0x0362A2,
0x0362B6,
0x0362CA,
0x0362DD,
0x0362F1,
0x036305,
0x0364C4,
0x036A2E,
0x036A4F,
0x036DF5,
0x036E3D,
0x037E30,
0x037E62,
0x037EB4,
0x037EE9,
0x037F1C,
0x037F4F,
0x037FAE,
0x03800D,
0x0380AB,
0x0380EC,
0x0381BC,
0x038200,
0x03826E,
0x038365,
0x03836C,
0x038375,
0x038392,
0x038396,
0x03839A,
0x03839E,
0x0383A2,
0x0383A7,
0x0383AB,
0x0383AF,
0x0383B3,
0x0383BB,
0x0383BF,
0x0383DB,
0x0383F7,
0x038405,
0x03846C,
0x038539,
0x03869B,
0x0387E6,
0x0388B3,
0x038922,
0x038DEF,
0x038E31,
0x038E6E,
0x038E9F,
0x038EAC,
0x038EB9,
0x038EF6,
0x038F9B,
0x038FE8,
0x039206,
0x03925E,
0x0392AC,
0x0392F2,
0x03943B,
0x0394CD,
0x039525,
0x039599,
0x0396C2,
0x0397F3,
0x0398CE,
0x039ABD,
0x039D26,
0x039D98,
0x03A22A,
0x03A282,
0x03A4A0,
0x03A4B7,
0x03A933,
0x03B646,
0x03C067,
0x03C161,
0x03C181,
0x03C190,
0x03C253,
0x03C259,
0x03C9E6,
0x03CF07,
0x03CF53,
0x03D016,
0x03D01E,
0x03D2AC,
0x03D306,
0x03D34D,
0x03D3A4,
0x03D3D4,
0x03D404,
0x03D41C,
0x03D42E,
0x03D44C,
0x03D466,
0x03D49A,
0x03D4C9,
0x03D533,
0x03D84F,
0x03D8CA,
0x03D8E0,
0x03D92C,
0x03D98A,
0x03DC5F,
0x03DCE6,
0x03DCF2,
0x03DD36,
0x03DD6C,
0x03DDC4,
0x03DDCA,
0x03DE00,
0x03DE1A,
0x03DE33,
0x03DE8E,
0x03DEEA,
0x03DF38,
0x03DF60,
0x03DF9C,
0x03DFD6,
0x03DFEF,
0x03E046,
0x03E0B0,
0x03E10E,
0x03E15A,
0x03E1A5,
0x03E1F1,
0x03E290,
0x03E2C0,
0x03E2F0,
0x03E3A0,
0x03E3F6,
0x03E4B4,
0x03E54C,
0x03E5F6,
0x03E64B,
0x03E731,
0x03E894,
0x03EA34,
0x03EA9C,
0x03EBCE,
0x03EC9E,
0x03ED0E,
0x03ED3C,
0x03ED64
]

# These are the ones to which we already attibuted meaningful routine names:
for pointer, label in KNOWN_LABELS.items():
    if pointer not in entry_points:
        entry_points.append(pointer)


rom_file = sys.argv[1]
trace = TLCS900H_Trace(rom_file,
                       relocation_blocks=RELOCATION_BLOCKS,
                       subroutines=POSSIBLY_UNUSED_CODEBLOCKS.copy(),
                       labels=KNOWN_LABELS.copy(),
                       loglevel=0)
trace.jump_table_from = jump_table_from
trace.count_warns = 0

if parse_interrupt_table:
    trace.load_interrupt_vector()

trace.run(entry_points)
for ep in entry_points:
    trace.register_label(ep)

if trace.count_warns:
    print(f"There are at least {trace.count_warns} jump tables.")

trace.save_disassembly_listing(f"{rom_file}.asm")

